{{#section 'title'}}
Booking Ticket
{{/section}}

{{> loading }}

{{#section 'style'}}
<style>
    .page-single * {
        color: #fff;
    }

    .theater_group {
        display: flex;
        flex: 1 1 auto;
        justify-content: center;
        margin: auto;
        border: none;
    }

    .theater_group > .group, .theater_group > .theater {
        margin: 15px;
        width: 20%;
    }

    .margin_t20 {
        margin-top: 20px;
    }

    .showtime {
        display: flex;
    }

    .showtime .showtime_item {
        display: flex;
        flex: 0 1 auto;
        flex-direction: column;
        margin-right: 20px;
    }

    .showtime_date, .single-room {
        margin: 10px;
        padding: 5px;
    }

    .showtime_item .single-room {
        border: 1px solid #074ce0;
        background: transparent;
        padding: 10px;
    }

    .showtime_item .single-room:hover {
        background-color: #074ce0;
    } 

    .booking-wrapper {
        width: 100%;
        margin: auto;
    }

    @media(min-width: 768px) {
        .booking-wrapper {
            width: 80%;
        }
    }
</style>
{{/section}}

<div x-data="init()">
    <div class="hero user-hero">
		<div class="container">
			<div class="col-md-12">
               <div class="hero-ct">
                   <h1 class="mr_0 mb_10">{{name}}</h1>
               </div>
	        </div>
		</div>
	</div>
	<div class="page-single">
		<div class="container">
            <div class="booking-wrapper">
                <div class="theater_group topbar-filter">
                    <div class="group">
                        <label class="group_title">Group</label>
                        <select x-model="groupSelected">
                            <option value="">--None--</option>
                            <template x-for="(item, index) in groups">
                                <option x-bind:value="item.id" x-text="item.name"></option>
                            </template>
                        </select>
                    </div>
                    <template x-if="groupSelected">
                        <div class="theater">
                            <label class="theater_title">Theater</label>
                            <select x-model="theaterSelected" @change="get" x-on:change="fetchShowTimes()">
                                <option value="">--None--</option>
                                <template x-for="(item, index) in theaters[groupSelected]">
                                    <option x-bind:value="item.id" x-text="item.name"></option>
                                </template>
                            </select>
                        </div>
                    </template>
                </div>
            <template x-if="theaterSelected">
                    <div class="row ipad-width">
                        <div class="screen-wrapper showtime">
                            <template x-for="[date, items] in Object.entries(showTimes)">
                                <div class="showtime_item">
                                    <div class="showtime_date" x-text="getDay(date)"></div>
                                    <template x-for="(showTime, index) in items" :key="index">
                                        <button class="single-room" x-text="showTime.room.name" @click="formatSeatsData(showTime.room.rows, Object.values(showTime.room.seats))"></button>
                                    </template>
                                </div>
                            </template>
                        </div>
                    </div>
                </template>
                <template x-if="seats">
                    <div class="row ipad-width margin_t20">
                        <div class="screen-wrapper">
                            <template x-for="(row, index) in seats" :key="index">
                                <ul class="seat-area">
                                    <li class="seat-line">
                                        <span>G</span>
                                        <ul class="seat--area">
                                            <li class="front-seat">
                                                <ul>
                                                    <template x-for="(col, index) in row" :key="index">
                                                        <li class="single-seat">
                                                            <img src="/images/seat01.png" alt="seat" onclick="bookingSeat(col.id)">
                                                        </li>
                                                </template>
                                                </ul>
                                            </li>
                                        </ul>
                                        <span>G</span>
                                    </li>
                                </ul>
                            </template>
                        </div>
                    </div>
                </template>
            </div>
		</div>
	</div>
</div>

<script>
    function init() {
        const groups = JSON.parse('{{{ groups }}}');
        const theaters = JSON.parse('{{{ theaters }}}');

        return {
            groupSelected: '',
            theaterSelected: '',
            roomSelected: '',
            seats: [],
            showTimes: [],
            groups,
            theaters,
            bookingSeat(seatId) {
                axios.post('/api/ticket', { seatId, '{{ id }}' })
                    .then(() => {
                        alert('success');
                    })
                    .catch(() => {
                        alert('falied')
                    });
            },
            fetchGroups() {
                fetch('/group-theater')
                    .then((raw) => raw.json())
                    .then((response) => {
                        if(response.isSuccess) {
                            this.listGroup = response.data;
                        }
                    })
                    .catch((error) => {
                        console.log(error);
                    })
            },
            fetchTheaters() {
                fetch('/theater')
                    .then((raw) => raw.json())
                    .then((response) => {
                        if(response.isSuccess) {
                            this.listTheater = response.data;
                        }
                    })
                    .catch((error) => {
                        console.log(error);
                    });
            },
            fetchShowTimes() {
                fetch(`/api/showtime/1?movie={{id}}`)
                    .then((raw) => raw.json())
                    .then((response) => {
                        if(response.isSuccess) {
                            this.showTimes = response.data;
                        } 
                    })
                    .catch((error) => {
                        console.log(error);
                    })
            },
            formatSeatsData(row, seats) {
                formatSeat = [];
                for(i = 1; i <= row; i++) {
                    formatSeat.push(
                        seats.filter((seat) => seat.row === i)
                    );
                }
                this.seats = formatSeat;      
                console.log(formatSeat);
            },
            getDay(date) {
                return new Date(date).getDate();
            }
        }
    }
</script>