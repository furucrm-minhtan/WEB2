{{#contentFor 'title'}}
Admin
{{/contentFor}}
{{!< layout-admin}}

{{#contentFor 'style' }}
<style>
    input[type="date"] {
        color: #000 !important;
    }
</style>
{{/contentFor}}


<div x-cloak x-data="init()" x-init="fetchReport()">
	<!-- Page Wrapper -->
    <div id="wrapper">

        <!-- Sidebar -->
        <ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

            <!-- Sidebar - Brand -->
            <a class="sidebar-brand d-flex align-items-center justify-content-center" href="index.html">
                <div class="sidebar-brand-icon rotate-n-15">
                    <i class="fas fa-laugh-wink"></i>
                </div>
                <div class="sidebar-brand-text mx-3">Admin</div>
            </a>

            <!-- Divider -->
            <hr class="sidebar-divider my-0">

            <!-- Nav Item - Dashboard -->
            <li class="nav-item active">
                <a class="nav-link" href="javascript:void(0)" @click="loadDashBoard()">
                    <i class="fas fa-fw fa-tachometer-alt"></i>
                    <span>Dashboard</span></a>
            </li>

            <!-- Divider -->
            <hr class="sidebar-divider">

            <!-- Nav Item - Pages Collapse Menu -->
            <li class="nav-item">
                <a class="nav-link collapsed" href="javascript:void(0)" @click="loadManagement()">
                    <i class="fas fa-fw fa-cog"></i>
                    <span>Manager</span>
                </a>
            </li>

             <!-- Divider -->
            <hr class="sidebar-divider">

             <li class="nav-item">
                <a class="nav-link collapsed" href="#">
                    <i class="fas fa-fw fa-cog"></i>
                    <span>Statistic</span>
                </a>
            </li>
        </ul>
        <!-- End of Sidebar -->

        <!-- Content Wrapper -->
        <div id="content-wrapper" class="d-flex flex-column">
            <!-- Main Content -->
            <div id="content">
 				<nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">

                    <!-- Sidebar Toggle (Topbar) -->
                    <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
                        <i class="fa fa-bars"></i>
                    </button>

                    <!-- Topbar Navbar -->
                    <ul class="navbar-nav ml-auto">
                        <div class="topbar-divider d-none d-sm-block"></div>

                        <!-- Nav Item - User Information -->
                        <li class="nav-item dropdown no-arrow">
                            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button"
                                data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small">Douglas McGee</span>
                                <img class="img-profile rounded-circle"
                                    src="img/undraw_profile.svg">
                            </a>
                            <!-- Dropdown - User Information -->
                            <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in"
                                aria-labelledby="userDropdown">
                                <a class="dropdown-item" href="#">
                                    <i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Profile
                                </a>
                                <a class="dropdown-item" href="#">
                                    <i class="fas fa-cogs fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Settings
                                </a>
                                <a class="dropdown-item" href="#">
                                    <i class="fas fa-list fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Activity Log
                                </a>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="#" data-toggle="modal" data-target="#logoutModal">
                                    <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Logout
                                </a>
                            </div>
                        </li>

                    </ul>

                </nav>
                <!-- End of Topbar -->

                <!-- Begin Page Content -->
                <div class="container-fluid">
                    <div x-show="section === 'management'">
					    {{>management}}
                    </div>
                    {{!-- <div x-show="section === 'theater'">
				    	{{>addTheater}}
                    </div>
                    <div x-show="section === 'showtime'">
					    {{>addShowTime}}
                    </div> --}}
                    <div x-show="section === 'dashboard'">
                        <!-- Page Heading -->
                        <div class="d-sm-flex align-items-center justify-content-between mb-4">
                            <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
                            <a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm"><i
                                    class="fas fa-download fa-sm text-white-50"></i> Generate Report</a>
                        </div>
                    
                        <!-- Content Row -->
                        <div class="row">
                    
                            <!-- Earnings (Monthly) Card Example -->
                            <div class="col-xl-3 col-md-6 mb-4">
                                <div class="card border-left-primary shadow h-100 py-2">
                                    <div class="card-body">
                                        <div class="row no-gutters align-items-center">
                                            <div class="col mr-2">
                                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                                    Earnings (Monthly)</div>
                                                <div class="h5 mb-0 font-weight-bold text-gray-800">$40,000</div>
                                            </div>
                                            <div class="col-auto">
                                                <i class="fas fa-calendar fa-2x text-gray-300"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    
                            <!-- Earnings (Monthly) Card Example -->
                            <div class="col-xl-3 col-md-6 mb-4">
                                <div class="card border-left-success shadow h-100 py-2">
                                    <div class="card-body">
                                        <div class="row no-gutters align-items-center">
                                            <div class="col mr-2">
                                                <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                                    Earnings (Annual)</div>
                                                <div class="h5 mb-0 font-weight-bold text-gray-800">$215,000</div>
                                            </div>
                                            <div class="col-auto">
                                                <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    
                        <!-- Content Row -->
                    
                        <div class="row">
                    
                            <!-- Area Chart -->
                            <div class="col-xl-8 col-lg-7">
                                <div class="card shadow mb-4">
                                    <!-- Card Header - Dropdown -->
                                    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary">Earnings Overview</h6>
                                        <div class="dropdown no-arrow">
                                            <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown"
                                                aria-haspopup="true" aria-expanded="false">
                                                <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                                            </a>
                                            <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in"
                                                aria-labelledby="dropdownMenuLink">
                                                <div class="dropdown-header">Dropdown Header:</div>
                                                <a class="dropdown-item" href="#">Action</a>
                                                <a class="dropdown-item" href="#">Another action</a>
                                                <div class="dropdown-divider"></div>
                                                <a class="dropdown-item" href="#">Something else here</a>
                                            </div>
                                        </div>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body">
                                        <div class="chart-area">
                                            <canvas id="myAreaChart"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    
                            <!-- Pie Chart -->
                            <div class="col-xl-4 col-lg-5">
                                <div class="card shadow mb-4">
                                    <!-- Card Header - Dropdown -->
                                    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary">Revenue Sources</h6>
                                        <div class="dropdown no-arrow">
                                            <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown"
                                                aria-haspopup="true" aria-expanded="false">
                                                <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                                            </a>
                                            <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in"
                                                aria-labelledby="dropdownMenuLink">
                                                <div class="dropdown-header">Dropdown Header:</div>
                                                <a class="dropdown-item" href="#">Action</a>
                                                <a class="dropdown-item" href="#">Another action</a>
                                                <div class="dropdown-divider"></div>
                                                <a class="dropdown-item" href="#">Something else here</a>
                                            </div>
                                        </div>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body">
                                        <div class="chart-pie pt-4 pb-2">
                                            <canvas id="myPieChart"></canvas>
                                        </div>
                                        <div class="mt-4 text-center small">
                                            <span class="mr-2">
                                                <i class="fas fa-circle text-primary"></i> Direct
                                            </span>
                                            <span class="mr-2">
                                                <i class="fas fa-circle text-success"></i> Social
                                            </span>
                                            <span class="mr-2">
                                                <i class="fas fa-circle text-info"></i> Referral
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                   
                </div>
                <!-- /.container-fluid -->
            </div>
            <!-- End of Main Content -->
        </div>
        <!-- End of Content Wrapper -->

    </div>
    <!-- End of Page Wrapper -->

    <!-- Scroll to Top Button-->
    <a class="scroll-to-top rounded" href="#page-top">
        <i class="fas fa-angle-up"></i>
    </a>

    <!-- Logout Modal-->
    <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                    <a class="btn btn-primary" href="login.html">Logout</a>
                </div>
            </div>
        </div>
    </div>
</div>


{{!-- <div x-data="init()">
	<div class="hero user-hero">
		<div class="container">
			<div class="row">
				<div class="col-md-12">
					<div class="hero-ct">
						<ul class="breadcumb">
							<h1 class="mr_0 mb_10">{{user_name}}</h1>
							<li class="active"><a href="#">Home</a></li>
							<li><span class="ion-ios-arrow-right"></span><span x-text="page" class="mr_0"></span></li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="page-single">
		<div class="container">
			<div class="row ipad-width">
				<div class="col-md-3 col-sm-12 col-xs-12">
					<div class="user-information">
						<div class="user-img">
							<a href="#"><img src="images/uploads/user-img.png" alt=""><br></a>
							<a href="#" class="redbtn">Change avatar</a>
						</div>
						<div class="user-fav">
							<p>Account Details</p>
							<ul>
								<li class="active"><a href="javascript:void(0)"
										x-on:click="page = 'Manage'">Manage</a></li>
								<li><a href="javascript:void(0)"
										x-on:click="loadingFavorite()">Favorite movies</a></li>
								<li><a href="javascript:void(0)"
										x-on:click="$event.preventDefault(); page = 'rate'">Rated movies</a></li>
							</ul>
						</div>
						<div class="user-fav">
							<p>Others</p>
							<ul>
								<li><a href="javascript:void(0)"
										x-on:click="$event.preventDefault(); page = 'change password'">Change
										password</a></li>
							</ul>
						</div>
					</div>
				</div>
				<div class="col-md-9 col-sm-12 col-xs-12">
					<div class="form-style-1 user-pro">
						<form>
							<h4>Add Group Theater</h4>
							<div class="row">
								<div class="col-12 form-it">
									<label>Name</label>
									<input type="text" x-model="groupForm.name">
								</div>
							</div>
							<div class="row">
								<div class="col-12 form-it">
									<label>Address</label>
									<input type="text" x-model="groupForm.address">
								</div>
							</div>
							<div class="row">
								<div class="col-md-2">
									<input class="submit" type="submit" value="change" @click="changePassword($event)">
								</div>
							</div>
						</form>

						<form class="theater">
							<h4>Add Theater</h4>
							<div class="row">
								<div class="col-12 form-it">
									<label>Name</label>
									<input type="text" x-model="theater.name">
								</div>
							</div>
							<div class="row">
								<div class="col-12 form-it">
									<label>Type</label>
									<select x-model="theater.type">
										<template>

										</template>
									</select>
								</div>
							</div>
							<div class="row">
								<div class="col-12 form-it">
									<label>Group</label>
									<select x-model="theater.group">
										<template x-for="(group, index) in groups">
											
										</template>
								    </select>
								</div>
							</div>
							<div class="row">
								<div class="col-md-2">
									<input class="submit" type="submit" value="save" @click="updateProfile($event)">
								</div>
							</div>
						</form>
						<div class="listview_theater">
							<table class="table-bordered">
								<thead>
									<tr>
										<th>Name</th>
										<th>Type</th>
										<th>Group</th>
									</tr>
								</thead>
								<tbody>
									<template x-for="(theater, index) in theaters" :key="index">
										<tr>
											<td></td>
											<td></td>
											<td></td>
										</tr>
									</template>
								</tbody>
							</table>
						</div>
					</div>
					<div class="form-style-1 user-pro">
						<form>
							<h4>Add Category</h4>
							<div class="row">
								<div class="col-12 form-it">
									<label>Name</label>
									<input type="text" x-model="categoryForm.name">
								</div>
							</div>
						</form>
						<form action="#" class="">
							<h4>Add Movie</h4>
							<div class="row">
								<div class="col-12 form-it">
									<label>Name</label>
									<input type="text" x-model="movieGroup.name">
								</div>
							</div>
							<div class="row">
								<div class="col-12 form-it">
									<label>poster</label>
									<input type="file" x-model="movieGroup.address">
								</div>
								<button class="btn btn-primary"></button>
							</div>
							<div class="row">
								<div class="col-12 form-it">
									<label>trailer</label>
									<input type="text" x-model="movieGroup.address">
								</div>
							</div>
							<div class="row">
								<div class="col-12 form-it">
									<label>describe</label>
									<textarea x-model="movieGroup.describe"></textarea>
								</div>
							</div>
							<div class="row">
								<div class="col-6 form-it">
									<label>director</label>
									<input type="text" x-model="movieGroup.director">
								</div>
								<div class="col-6 form-it">
									<label>writer</label>
									<input type="text" x-model="movieGroup.writer">
								</div>
							</div>
							<div class="row">
								<div class="col-md-6 form-it">
									<label>publish</label>
									<input type="date" x-model="movieGroup.publish">
								</div>
								<div class="col-md-6 form-it">
									<label>MMPA Rating</label>
									<input type="date" x-model="movieGroup.MMPA_rating">
								</div>
							</div>
							<div class="row">
								<div class="col-md-6 form-it">
									<label>category</label>
									<select x-model="movieGroup.category"></select>
								</div>
							</div>
							<div class="row">
								<div class="col-md-2">
									<input class="submit" type="submit" value="change" @click="changePassword($event)">
								</div>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
</div> --}}
{{#contentFor 'scripts'}}
<script>
	function init() {
        const post = (url, data) => {
           return new Promise((resolve, reject) => {
                axios.post(url, data)
                .then((response) => {
                    if(response.status === 201) {
                        resolve(response.data);
                    }
                })
                .catch((error) => {
                    console.log(error.response);
                    reject(error.response);
                });
           });
        }

        const put = (url, data) => {
           return new Promise((resolve, reject) => {
                axios.put(url, data)
                .then((response) => {
                    if(response.status === 201) {
                        resolve(response.data);
                    }
                })
                .catch((error) => {
                    console.log(error.response);
                    reject(error.response);
                });
           });
        }

         const destroy = (url, data) => {
           return new Promise((resolve, reject) => {
                axios.delete(url, data)
                .then((response) => {
                    if(response.status === 201) {
                        resolve(response.data);
                    }
                })
                .catch((error) => {
                    console.log(error.response);
                    reject(error.response);
                });
           })
        }

        return {
            modal: {
                show: {
                    header: true,
                    footer: true
                },
                title: 'Modal',
                content: '',
                errors: [],
                submitHandler: undefined
            },
            updateModal: function(settings) {
                this.modal = Object.assign(this.modal, settings);
            },
            movie: {
                table: undefined,
                data: {},
                listView: [],
                theaters: [],
                selectedTheaters: [],
                theaterIds: new Set(),
                fetchData() {
                    if($.fn.dataTable.isDataTable('#list-movie')) {
                        return false;
                    }
                    fetch('/movie')
                        .then((raw) => raw.json())
                        .then((response) => {
                            if(response.isSuccess) {
                                this.listView = response.data;

                                this.table = $('#list-movie').DataTable({
                                    data: this.listView,
                                    columns: [
                                        {
                                            data: 'name'
                                        },
                                        {
                                            data: 'describe'
                                        },
                                        {
                                            data: 'director'
                                        },
                                        {
                                            data: 'writer'
                                        },
                                        {
                                            data: 'MMPA_rating'
                                        },
                                        {
                                            data: 'publish'
                                        },
                                        {
                                            data: 'creationDate'
                                        },
                                        {
                                            data: 'updatedOn'
                                        }
                                    ],
                                    scrollX: true,
                                    columnDefs: [
                                    {
                                        render: function (data, type, row) {
                                            const date = moment(data);

                                            return date.isValid() ? date.format('DD/MM/YYYY') : '';
                                        },
                                        targets: [5,6,7]
                                    },
                                    {
                                        render: function(data, type, row) {
                                            return `
                                                <div>
                                                    <button class="btn btn-success text-uppercase" @click="movie.update($event,${row.id})">update</button>
                                                    <button class="btn btn-danger text-uppercase" @click="movie.delete($event,${row.id})">delete</button>
                                                </div>
                                            `
                                        },
                                        targets: 8
                                    }, 
                                    /**{ 
                                        className: "text-truncate", targets: [ 1 ] 
                                    },*/
                                    {  
                                        width: 400, targets: 1 
                                    }],
                                    createdRow: function(row, data) {
                                        $(row).attr('data-id', data.id);
                                    }
                                });
                                $('.dataTables_length').addClass('bs-select');
                            }
                        })
                        .catch((error) => {
                            console.log(error);
                        })
                },
                create(event) {
                    event.preventDefault();
                    this.data = { MMPA_rating: 'PA-13' };
                    this.theaters = this.parent.theater.listView;
                    this.parent.modal.title = 'Create Movie';
                    this.parent.modal.content = 'movie_form';
                    this.parent.modal.submitHandler = (event) => {
                        event.stopPropagation();
                        
                        const form = document.getElementById('movie-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            form.classList.add('was-validated');   
                            
                            return false;       
                        }
                        form.classList.remove('was-validated');
                        const selectedTheaters = $('#selected-theaters option:selected');
                        if(!selectedTheaters.length) {
                            $('#theaters-error').show();

                            return false;
                        }
                        $('#theaters-error').hide();
                        $.each(selectedTheaters, (key, element) => this.theaterIds.add($(element).val()));

                        post('/movie', { data: this.data, theaters: Array.from(this.theaterIds) })
                            .then((data) => {
                                if(data.isSuccess) {
                                    this.listView.push(data.data);
                                    this.table.row.add(data.data).draw();
                                    this.data = {};
                                    $('#modal').modal('hide');
                                }
                                else {
                                    throw data.message;
                                }
                            })
                            .catch(error => {
                                console.log(error);
                                alert(error);
                            });
                    }

                    $('#modal').modal('show');
                },
                update(event, id) {
                    event.preventDefault();

                    this.data = this.table.row($(`#list-movie tr[data-id="${id}"]`)).data();
                    this.parent.modal.title = 'Update Movie';
                    this.parent.modal.content = 'movie_form';
                    this.parent.modal.submitHandler = (event) => {
                        event.stopPropagation();

                        const form = document.getElementById('movie-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');

                        put('/movie', { id, ...this.data })
                            .then((data) => {
                                if(data.isSuccess) {
                                    data = {};
                                    $('#modal').modal('hide');
                                }
                                else {
                                    alert('update failed');
                                }   
                            })
                            .catch(error => alert('update failed'));
                    }

                    $('#modal').modal('show');
                },
                readFileUpload(event) {
                    event.preventDefault();
                    const file = event.target.files[0];
                    if(!file) return;

                    const fr = new FileReader();
                    fr.onload = () => {
                        this.data.poster = fr.result.split(',').pop();
                    }

                    fr.readAsDataURL(file);
                },
                delete(event, id) {
                    event.preventDefault();

                    destroy('/movie', { id })
                        .then((data) => console.log(data))
                        .catch(error => alert('delete failed'));
                },
                moveRightTheater(event) {
                    event.preventDefault();

                    const theaters = $('#select-theaters option:selected');
                    if(theaters.length) {
                        const ids = [];
                        $.each(theaters, ( key, element ) => ids.push(+$(element).val()) );
                        const newTheaters = this.theaters.filter((theater) => !ids.includes(theater.id));

                        this.selectedTheaters = this.selectedTheaters.concat(this.theaters.filter((theater) => ids.includes(theater.id)));
                        this.theaters = newTheaters;
                    }
                },
                moveLeftTheater(event) {
                    event.preventDefault();

                    const theaters = $('#selected-theaters option:selected');
                    if(theaters.length) {
                        const ids = [];
                        $.each(theaters, ( key, element ) => ids.push(+$(element).val()) );
                        const newTheaters = this.selectedTheaters.filter((theater) => !ids.includes(theater.id));

                        this.theaters = this.theaters.concat(this.selectedTheaters.filter((theater) => ids.includes(theater.id)));
                        this.selectedTheaters = newTheaters;
                    }
                }
            },
            category: {
                table: undefined,
                data: {},
                listView: [],
                addRow() {
                    table.row.add()
                },
                fetchData() {
                    if($.fn.dataTable.isDataTable('#list-category')) {
                        return false;
                    }
                    fetch('/category')
                        .then((raw) => raw.json())
                        .then((response) => {
                            if(response.isSuccess) {
                                this.listView = response.data;

                                this.table = $('#list-category').DataTable({
                                    data: this.listView,
                                    columns: [
                                        {
                                            data: 'name'
                                        },
                                        {
                                            data: 'level'
                                        },
                                        {
                                            data: 'creationDate'
                                        },
                                        {
                                            data: 'updatedOn'
                                        }
                                    ],
                                    columnDefs: [{
                                        render: function (data, type, row) {
                                            const date = moment(data);

                                            return date.isValid() ? date.format('DD/MM/YYYY') : '';
                                        },
                                        targets: [2,3]
                                    }, {
                                        render: function(data, type, row) {
                                            return `
                                                <div>
                                                    <button class="btn btn-success text-uppercase" @click="category.update($event,${row.id})">update</button>
                                                    <button class="btn btn-danger text-uppercase" @click="category.delete($event,${row.id})">delete</button>
                                                </div>
                                            `
                                        },
                                        targets: 4
                                    }],
                                    createdRow: function(row, data) {
                                        $(row).attr('data-id', data.id);
                                    }
                                });
                                $('.dataTables_length').addClass('bs-select');
                            }
                        })
                        .catch((error) => {
                            console.log(error);
                        });
                },
                create(event) {
                    event.preventDefault();
                    this.data = {
                        level: 1
                    };
                    this.parent.modal.title = 'Create Category';
                    this.parent.modal.content = 'category_form';
                    this.parent.modal.submitHandler = (event) => {
                        event.stopPropagation();
                        const form = document.getElementById('category-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');

                        post('/category', this.data)
                            .then((data) => {
                                if(data.isSuccess) {
                                    this.listView.push(data.data);
                                    this.table.row.add(data.data).draw();
                                    this.data = {};
                                    $('#modal').modal('hide');
                                }
                                else {
                                    throw data.message;
                                }
                            })
                            .catch(error => {
                                console.log(error);
                                alert(error);
                            });
                    }

                    $('#modal').modal('show');
                },
                update(event, id, data) {
                    event.preventDefault();
                    
                    this.data = this.table.row($(`#list-category tr[data-id="${id}"]`)).data();
                    this.parent.modal.title = 'Update Category';
                    this.parent.modal.content = 'category_form';
                    this.parent.modal.submitHandler = (event) => {
                        event.stopPropagation();
                        const form = document.getElementById('category-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');

                        put('/category', { id, ...this.data })
                            .then((data) => {
                                if(data.isSuccess) {
                                    data = {};
                                    $('#modal').modal('hide');
                                }
                                else {
                                    alert('update failed');
                                }   
                            })
                            .catch(error => alert('update failed'));
                    }

                    $('#modal').modal('show');
                },
                delete(event, id) {
                    event.preventDefault();

                    destroy('/category', { id })
                        .then((data) => console.log(data))
                        .catch(error => alert('delete failed'));
                }
            },
            group: {
                table: undefined,
                data: {},
                listView: [],
                addRow() {
                    table.row.add()
                },
                fetchData() {
                    if($.fn.dataTable.isDataTable('#list-group')) {
                        return false;
                    }
                    fetch('/groupthearter')
                        .then((raw) => raw.json())
                        .then((response) => {
                            if(response.isSuccess) {
                                this.listView = response.data;

                                this.table = $('#list-group').DataTable({
                                    data: this.listView,
                                    columns: [
                                        {
                                            data: 'name'
                                        },
                                        {
                                            data: 'address'
                                        },
                                    ],
                                    columnDefs: [{
                                        render: function(data, type, row) {
                                            return `
                                                <div>
                                                    <button class="btn btn-success text-uppercase" @click="group.update($event,${row.id})">update</button>
                                                    <button class="btn btn-danger text-uppercase" @click="group.delete($event,${row.id})">delete</button>
                                                </div>
                                            `
                                        },
                                        targets: 2
                                    }],
                                    createdRow: function(row, data) {
                                        $(row).attr('data-id', data.id);
                                    },
                                });
                                $('.dataTables_length').addClass('bs-select');
                            }
                        })
                        .catch((error) => {
                            console.log(error);
                        });
                },
                create(event) {
                    event.preventDefault();

                    this.data = {};

                    this.parent.modal.title = 'Create Group';
                    this.parent.modal.content = 'group_form';
                    this.parent.modal.submitHandler = (event) => {
                        const form = document.getElementById('group-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');   

                        post('/groupthearter', this.data)
                            .then((data) => {
                                if(data.isSuccess) {
                                    this.listView.push(data.data);
                                    this.table.row.add(data.data).draw();
                                    this.data = {};
                                    $('#modal').modal('hide');
                                }
                                else {
                                    throw data.message;
                                }
                            })
                            .catch(error => {
                                console.log(error);
                                alert(error);
                            });
                    }

                    $('#modal').modal('show');
                },
                update(event, id, data) {
                    event.preventDefault();
                    
                    this.data = this.table.row($(`#list-group tr[data-id="${id}"]`)).data();
                    this.parent.modal.title = 'Update group';
                    this.parent.modal.content = 'group_form';
                    this.parent.modal.submitHandler = (event) => {
                        const form = document.getElementById('group-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');   

                        put('/groupthearter', { id, ...this.data })
                            .then((data) => {
                                if(data.isSuccess) {
                                    data = {};
                                    $('#modal').modal('hide');
                                }
                                else {
                                    alert('update failed');
                                }   
                            })
                            .catch(error => alert('update failed'));
                    }

                    $('#modal').modal('show');
                },
                delete(event, id) {
                    event.preventDefault();

                    destroy('/groupthearter', { id })
                        .then((data) => console.log(data))
                        .catch(error => alert('delete failed'));
                }
            },
            theater: {
                table: undefined,
                data: {},
                listView: [],
                addRow() {
                    table.row.add()
                },
                fetchData() {
                    if ($.fn.dataTable.isDataTable('#list-theater'))
                    {
                        return false;
                    }
                    fetch('/theater')
                        .then((raw) => raw.json())
                        .then((response) =>
                        {
                            if (response.isSuccess)
                            {
                                this.listView = response.data;

                                this.table = $('#list-theater').DataTable({
                                    data: this.listView,
                                    columns: [
                                        {
                                            data: 'name'
                                        },
                                        {
                                            data: 'type'
                                        },
                                        {
                                            data: 'groupId'
                                        }
                                    ],
                                    columnDefs: [{
                                        render: function (data, type, row)
                                        {
                                            return `
                                                <div>
                                                    <button class="btn btn-success text-uppercase" @click="theater.update($event,${row.id})">update</button>
                                                    <button class="btn btn-danger text-uppercase" @click="theater.delete($event,${row.id})">delete</button>
                                                </div>
                                            `
                                        },
                                        targets: 3
                                    }],
                                    createdRow: function (row, data)
                                    {
                                        $(row).attr('data-id', data.id);
                                    },
                                });
                                $('.dataTables_length').addClass('bs-select');
                            }
                        })
                        .catch((error) =>
                        {
                            console.log(error);
                        });
                },
                create(event) {
                    event.preventDefault();
                    const firstGroup = this.parent.group.listView[0]?.id ?? '';

                    this.data = {
                        type: "2D",
                        groupId: firstGroup
                    };
                    this.parent.modal.title = 'Create Theater';
                    this.parent.modal.content = 'theater_form';
                    this.parent.modal.submitHandler = (event) => {
                        const form = document.getElementById('theater-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');

                        post('/theater', this.data)
                           .then((data) => {
                                if(data.isSuccess) {
                                    this.listView.push(data.data);
                                    this.table.row.add(data.data).draw();
                                    $('#modal').modal('hide');
                                }
                                else {
                                    throw data.message;
                                }
                            })
                            .catch(error => {
                                console.log(error);
                                alert(error);
                            });
                    }

                    $('#modal').modal('show');
                },
                update(event, id, data) {
                    event.preventDefault();
                    
                    this.data = this.table.row($(`#list-theater tr[data-id="${id}"]`)).data();
                    this.parent.modal.title = 'Update theater';
                    this.parent.modal.content = 'theater_form';
                    this.parent.modal.submitHandler = (event) => {
                        const form = document.getElementById('theater-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');

                        put('/theater', { id, ...this.data })
                            .then((data) => {
                                if(data.isSuccess) {
                                    data = {};
                                    $('#modal').modal('hide');
                                }
                                else {
                                    alert('update failed');
                                }   
                            })
                            .catch(error => alert('update failed'));
                    }

                    $('#modal').modal('show');
                },
                delete(event, id) {
                    event.preventDefault();

                    destroy('/theater', { id })
                        .then((data) => console.log(data))
                        .catch(error => alert('delete failed'));
                }
            },
            section: 'dashboard',
            fetchReport() {
               
            },
            loadTheater() {
            
            },
            loadManagement() {
                this.section = 'management';
                
                this.category.fetchData();
                this.category.parent = this;
                this.movie.fetchData();
                this.movie.parent = this;
                this.group.fetchData();
                this.group.parent = this;
                this.theater.fetchData();
                this.theater.parent = this;
            },
            loadDashBoard(){
                this.section ='dashboard'
            }

		}
	}
</script>
{{/contentFor }}