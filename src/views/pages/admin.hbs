{{#section 'title'}}
Profile
{{/section}}

{{> loading }}

<div x-data="init()">
	<div class="hero user-hero">
		<div class="container">
			<div class="row">
				<div class="col-md-12">
					<div class="hero-ct">
						<ul class="breadcumb">
							<h1 class="mr_0 mb_10">{{user_name}}</h1>
							<li class="active"><a href="#">Home</a></li>
							<li><span class="ion-ios-arrow-right"></span><span x-text="page" class="mr_0"></span></li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="page-single">
		<div class="container">
			<div class="row ipad-width">
				<div class="col-md-3 col-sm-12 col-xs-12">
					<div class="user-information">
						<div class="user-img">
							<a href="#"><img src="images/uploads/user-img.png" alt=""><br></a>
							<a href="#" class="redbtn">Change avatar</a>
						</div>
						<div class="user-fav">
							<p>Account Details</p>
							<ul>
								<li class="active"><a href="javascript:void(0)"
										x-on:click="page = 'Manage'">Manage</a></li>
								<li><a href="javascript:void(0)"
										x-on:click="loadingFavorite()">Favorite movies</a></li>
								<li><a href="javascript:void(0)"
										x-on:click="$event.preventDefault(); page = 'rate'">Rated movies</a></li>
							</ul>
						</div>
						<div class="user-fav">
							<p>Others</p>
							<ul>
								<li><a href="javascript:void(0)"
										x-on:click="$event.preventDefault(); page = 'change password'">Change
										password</a></li>
							</ul>
						</div>
					</div>
				</div>
				< class="col-md-9 col-sm-12 col-xs-12">
					<div class="form-style-1 user-pro">
						<form class="theater">
							<h4>Add Theater</h4>
							<div class="row">
								<div class="col-12 form-it">
									<label>Name</label>
									<input type="text" x-model="theater.name">
								</div>
							</div>
							<div class="row">
								<div class="col-12 form-it">
									<label>Type</label>
									<select x-model="theater.type">
										<template>

										</template>
									</select>
								</div>
							</div>
							<div class="row">
								<div class="col-12 form-it">
									<label>Group</label>
									<select x-model="theater.group">
										<template x-for="(group, index) in groups">
											
										</template>
								    </select>
								</div>
							</div>
							<div class="row">
								<div class="col-md-2">
									<input class="submit" type="submit" value="save" @click="updateProfile($event)">
								</div>
							</div>
						</form>
						<div class="listview_theater">
							<table class="table-bordered">
								<thead>
									<tr>
										<th>Name</th>
										<th>Type</th>
										<th>Group</th>
									</tr>
								</thead>
								<tbody>
									<template x-for="(theater, index) in theaters" :key="index">
										<tr>
											<td></td>
											<td></td>
											<td></td>
										</tr>
									</template>
								</tbody>
							</table>
						</div>
					</div>
					<div class="form-style-1 user-pro">
						<form action="#" class="">
							<h4>Add Group Theater</h4>
							<div class="row">
								<div class="col-12 form-it">
									<label>Name</label>
									<input type="text" x-model="groupForm.name">
								</div>
							</div>
							<div class="row">
								<div class="col-12 form-it">
									<label>Address</label>
									<input type="text" x-model="groupForm.address">
								</div>
							</div>
							<div class="row">
								<div class="col-md-2">
									<input class="submit" type="submit" value="change" @click="changePassword($event)">
								</div>
							</div>
						</form>
					</div>
					<div class="form-style-1 user-pro">
						<form action="#" class="">
							<h4>Add Movie</h4>
							<div class="row">
								<div class="col-12 form-it">
									<label>Name</label>
									<input type="text" x-model="groupForm.name">
								</div>
							</div>
							<div class="row">
								<div class="col-12 form-it">
									<label>poster</label>
									<input type="text" x-model="groupForm.address">
								</div>
							</div>
							<div class="row">
								<div class="col-md-2">
									<input class="submit" type="submit" value="change" @click="changePassword($event)">
								</div>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

{{#section 'script' }}
<script>
	function init() {
		const fetchFavoriteMovies = function(offset, limit, sort) {
			return new Promise((resolve, reject) => {
				fetch(`/bookmark?offset=${offset}&limit=${limit}&sort=${sort}`)
					.then(function(response) { 
						return response.json();
					})
					.then((data) => {
						if(data.isSuccess) {
							resolve(data);
						}
						else {
							throw data.message;
						}
					})
					.catch(function(error) {
						throw error;
					})
			});
		};

		return {
			page: 'profile', 
			favoriteMovieShow: 10,
			favoriteData: {
				total: 0,
				page: 1,
				currentPage: 1,
				sort: '',
				movies: [],
				show: []
			},
			sortType: [
				{ value: 'name', label: 'name' },
				{ value: 'publish', label: 'publish date' }
			],
			userForm: {
				id: '{{id}}',
				user_name: '{{user_name}}',
				email: '{{email}}',
				name: '{{name}}',
				phone: '{{phone}}',
				address: '{{address}}',
				city: '{{city}}'
			},
			passwordForm: {},	
			updateProfile(event)
			{
				event.preventDefault();

				axios.post('/profile', this.userForm)
					.then(function (response)
					{
						console.log(response);
					})
					.catch(function (error)
					{
						console.log(error);
					});
			},
			changePassword(event)
			{
				event.preventDefault();

				if(this.passwordForm.newPassword != this.passwordForm.confPassword) {
					alert('confirm password not match');
					return false;
				}

				axios.post('/change-password', this.passwordForm)
					.then(function (response)
					{

					})
					.catch(function (error)
					{
						console.log(error);
					});
			},
			loadingFavorite() {
				this.page = 'favorite';
				
				fetch(`/bookmark/user?limit=${this.favoriteMovieShow}`)
					.then(function(response) { 
						return response.json();
					})
					.then((data) => {
						if(data.isSuccess) {
							this.favoriteData.total = data.data.totalBookmark;
							this.favoriteData.page = data.data.page;
							
							return fetchFavoriteMovies(0, this.favoriteMovieShow, this.favoriteData.sort);
						}
					})
					.then((data) => {
						this.favoriteData.movies = this.favoriteData.movies.concat(data.data);
						this.favoriteData.show = this.dataShow(this.favoriteData.movies, 0, this.favoriteMovieShow);
					})
					.catch(function(error) {
						console.log(error);
					})
			},
			dataShow(data, from = 0, limit = 10) {
				return Array.from({ length: limit }, (_item, index) => data[index + from] );
			},
			prevPage(event) {
				event.preventDefault();
				this.favoriteData.movies--;

				this.favoriteData.show = this.dataShow(this.favoriteData.movies, this.favoriteData.page * this.favoriteMovieShow, this.favoriteMovieShow);
			},
			nextPage(event) {
				event.preventDefault();
				this.favoriteData.currentPage++;

				fetchFavoriteMovies(this.favoriteMovieShow)
					.then((data) => {
						this.favoriteData.movies = this.favoriteData.movies.concat(data.data);	
						this.favoriteData.show = this.dataShow(this.favoriteData.movies, this.favoriteData.page * this.favoriteMovieShow, this.favoriteMovieShow);
					})
					.catch((error) => {
						console.log(error);
					})
			},
			getDate(string) {
				const date = new Date(string);

				return `${date.getDate()}/${date.getMonth()}/${date.getFullYear()}`;
			}
		}
	}
</script>
{{/section }}