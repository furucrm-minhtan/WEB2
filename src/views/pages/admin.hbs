{{#contentFor 'title'}}
Admin
{{/contentFor}}
{{!< layout-admin}}

{{#contentFor 'style' }}
<style>
    input[type="date"] {
        color: #000 !important;
    }

    .alert-expand {
        display: none; 
        font-family: "Roboto",sans-serif;
        font-weight: 300;
    }
</style>
{{/contentFor}}


<div x-cloak x-data="init()" x-init="loadDashBoard()">
    <div style="z-index: 9999;" class="w-25 text-capitalize text-center fixed-top alert alert-expand mx-auto" role="alert"></div>

	<!-- Page Wrapper -->
    <div id="wrapper">

        <!-- Sidebar -->
        <ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

            <!-- Sidebar - Brand -->
            <a class="sidebar-brand d-flex align-items-center justify-content-center" href="index.html">
                <div class="sidebar-brand-icon rotate-n-15">
                    <i class="fas fa-laugh-wink"></i>
                </div>
                <div class="sidebar-brand-text mx-3">Admin</div>
            </a>

            <!-- Divider -->
            <hr class="sidebar-divider my-0">

            <!-- Nav Item - Dashboard -->
            <li class="nav-item active">
                <a class="nav-link" href="javascript:void(0)" @click="loadDashBoard()">
                    <i class="fas fa-fw fa-tachometer-alt"></i>
                    <span>Dashboard</span></a>
            </li>

            <!-- Divider -->
            <hr class="sidebar-divider">

            <!-- Nav Item - Pages Collapse Menu -->
            <li class="nav-item">
                <a class="nav-link collapsed" href="javascript:void(0)" @click="loadManagement()">
                    <i class="fas fa-fw fa-cog"></i>
                    <span>Manager</span>
                </a>
            </li>      
        </ul>
        <!-- End of Sidebar -->

        <!-- Content Wrapper -->
        <div id="content-wrapper" class="d-flex flex-column">
            <!-- Main Content -->
            <div id="content">
 				<nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">

                    <!-- Sidebar Toggle (Topbar) -->
                    <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
                        <i class="fa fa-bars"></i>
                    </button>

                    <!-- Topbar Navbar -->
                    <ul class="navbar-nav ml-auto">
                        <div class="topbar-divider d-none d-sm-block"></div>

                        <!-- Nav Item - User Information -->
                        <li class="nav-item dropdown no-arrow">
                            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button"
                                data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small">{{user.user_name}}</span>
                            </a>
                            <!-- Dropdown - User Information -->
                            <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in"
                                aria-labelledby="userDropdown">
                                {{!-- <a class="dropdown-item" href="#">
                                    <i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Profile
                                </a>
                                <a class="dropdown-item" href="#">
                                    <i class="fas fa-cogs fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Settings
                                </a>
                                <a class="dropdown-item" href="#">
                                    <i class="fas fa-list fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Activity Log
                                </a> --}}
                                <a class="dropdown-item" href="/authen/logout">
                                    <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Logout
                                </a>
                            </div>
                        </li>

                    </ul>

                </nav>
                <!-- End of Topbar -->

                <!-- Begin Page Content -->
                <div class="container-fluid">
                    <div x-show="section === 'management'">
					    {{>management}}
                    </div>
                    {{!-- <div x-show="section === 'theater'">
				    	{{>addTheater}}
                    </div>
                    <div x-show="section === 'showtime'">
					    {{>addShowTime}}
                    </div> --}}
                    <div x-show="section === 'dashboard'">
                        <!-- Page Heading -->
                        <div class="d-sm-flex align-items-center justify-content-between mb-4">
                            <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
                        </div>
                    
                        <!-- Content Row -->
                        <div class="row">
                    
                            <!-- Earnings (Monthly) Card Example -->
                            {{!-- <div class="col-xl-3 col-md-6 mb-4">
                                <div class="card border-left-primary shadow h-100 py-2">
                                    <div class="card-body">
                                        <div class="row no-gutters align-items-center">
                                            <div class="col mr-2">
                                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                                    Earnings (Monthly)</div>
                                                <div class="h5 mb-0 font-weight-bold text-gray-800">$40,000</div>
                                            </div>
                                            <div class="col-auto">
                                                <i class="fas fa-calendar fa-2x text-gray-300"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div> --}}
                    
                            <!-- Earnings (Monthly) Card Example -->
                            {{!-- <div class="col-xl-3 col-md-6 mb-4">
                                <div class="card border-left-success shadow h-100 py-2">
                                    <div class="card-body">
                                        <div class="row no-gutters align-items-center">
                                            <div class="col mr-2">
                                                <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                                    Earnings (Annual)</div>
                                                <div class="h5 mb-0 font-weight-bold text-gray-800">$215,000</div>
                                            </div>
                                            <div class="col-auto">
                                                <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div> --}}
                        </div>
                    
                        <!-- Content Row -->
                    
                        <div class="row">
                    
                            <!-- Area Chart -->
                            <div class="col-12">
                                <div class="card shadow mb-4">
                                    <!-- Card Header - Dropdown -->
                                    <div class="card-header py-3 d-flex flex-column flex-xl-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary flex-shrink-0">Movie Chart <span x-text="grantChart.movie.name"></span></h6>
                                        <form id="movie-chart-form" class="d-flex flex-column flex-xl-row col-12 needs-validation" novalidate>
                                            {{!-- <div class="d-flex flex-column flex-xl-row col-12 col-xl-2 ">
                                                <select class="browser-default custom-select" x-model="grantChart.movie.id" required>
                                                    <option value="">--None--</option>
                                                    <template x-for="(item, index) in movie.listView">
                                                        <option x-bind:value="item.id" x-text="item.name"></option>
                                                    </template>
                                                </select>
                                            </div> --}}
                                            
                                            <div class="d-flex flex-column flex-xl-row col-12 col-xl-4 align-items-baseline">
                                                <label for="start-range" class="col-12 col-xl-2">Start</label>
                                                <input id="start-range" class="col-12 col-xl-9 form-control" type="date" x-model="grantChart.movie.start" required />
                                            </div>
                                            <div class="d-flex flex-column flex-xl-row col-12 col-xl-4   align-items-baseline">
                                                <label for="end-range" class="col-12 col-xl-2">End</label>
                                                <input id="end-range" class="col-12 col-xl-9 form-control" type="date" x-model="grantChart.movie.end" required />
                                            </div>
                                            <button class="btn btn-primary" @click="movieStatistical(event)">Render Chart</button>
                                        </form>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body" x-bind:style="'height: ' + (grantChart.movie.height + 100) + 'px;'">
                                        <div class="chart-area" x-show="grantChart.movie.data.length">
                                            <div class="mt-2">
                                                <div id="grant-chart-movie"></div>
                                            </div>
                                        </div>
                                         <div class=" text-center" x-show="!grantChart.movie.data.length">
                                             <h1>haven't data to create chart</h1>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    
                           
                            <div class="col-12">
                                <div class="card shadow mb-4">
                                    <div class="card-header py-3 d-flex flex-column flex-xl-row align-items-center justify-content-between">
                                        <h6 class="m-0 font-weight-bold text-primary flex-shrink-0">Group Chart <span x-text="grantChart.group.name"></span></h6>
                                        <form id="group-chart-form" class="d-flex flex-column flex-xl-row col-12 needs-validation" novalidate>
                                            
                                            <div class="d-flex flex-column flex-xl-row col-12 col-xl-4 align-items-baseline">
                                                <label for="start-range" class="col-12 col-xl-2">Start</label>
                                                <input id="start-range" class="col-12 col-xl-9 form-control" type="date" x-model="grantChart.group.start" required />
                                            </div>
                                            <div class="d-flex flex-column flex-xl-row col-12 col-xl-4   align-items-baseline">
                                                <label for="end-range" class="col-12 col-xl-2">End</label>
                                                <input id="end-range" class="col-12 col-xl-9 form-control" type="date" x-model="grantChart.group.end" required />
                                            </div>
                                            <button class="btn btn-primary" @click="groupStatistical(event)">Render Chart</button>
                                        </form>
                                    </div>
                                    <!-- Card Body -->
                                    <div class="card-body" x-bind:style="'height: ' + (grantChart.group.height + 100) + 'px;'">
                                        <div class="chart-area" x-show="grantChart.group.data.length">
                                            <div class="mt-2">
                                                <div id="grant-chart-group"></div>
                                            </div>
                                        </div>
                                         <div class=" text-center" x-show="!grantChart.group.data.length">
                                             <h1>haven't data to create chart</h1>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                   
                </div>
                <!-- /.container-fluid -->
            </div>
            <!-- End of Main Content -->
        </div>
        <!-- End of Content Wrapper -->

    </div>
    <!-- End of Page Wrapper -->

    <!-- Scroll to Top Button-->
    <a class="scroll-to-top rounded" href="#page-top">
        <i class="fas fa-angle-up"></i>
    </a>

    <!-- Logout Modal-->
    <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                    <a class="btn btn-primary" href="login.html">Logout</a>
                </div>
            </div>
        </div>
    </div>
</div>

{{#contentFor 'scripts'}}
<script src="https://www.gstatic.com/charts/loader.js" defer></script>
<script>
    const grantChart = {
        movie: {
            limit: 5,
            name: '',
            width: 1200,
            height: 600,
            data: []
        },
        group: {
            limit: 5,
            name: '',
            width: 1200,
            height: 600,
            data: []
        }
    };

	function init() {
        const post = (url, data) => {
           return new Promise((resolve, reject) => {
                axios.post(url, data)
                .then((response) => {
                    if(response.status === 201) {
                        showAlert(response.data.message, response.data.isSuccess ? 'success' : 'danger');
                        resolve(response.data);
                    }
                })
                .catch((error) => {
                    console.log(error.response);
                    showAlert(error.response.message, 'danger');
                    reject(error.response);
                });
           });
        }

        const put = (url, data) => {
           return new Promise((resolve, reject) => {
                axios.put(url, data)
                .then((response) => {
                    if(response.status === 200) {
                        showAlert(response.data.message, response.data.isSuccess ? 'success' : 'danger');
                        resolve(response.data);
                    }
                })
                .catch((error) => {
                    console.log(error.response);
                    showAlert(error.response.message, 'danger');
                    reject(error.response);
                });
           });
        }

         const destroy = (url, data) => {
           return new Promise((resolve, reject) => {
                axios.delete(url, data)
                .then((response) => {
                    if(response.status === 200) {
                        showAlert(response.data.message, response.data.isSuccess ? 'success' : 'danger');
                        resolve(response.data);
                    }
                })
                .catch((error) => {
                    console.log(error.response);
                    showAlert(error.response.message, 'danger');
                    reject(error.response);
                });
           })
        }

        const showAlert = (text, type) => {
            const alert = $('.alert');
            alert.removeClass('alert-danger alert-success').addClass(`alert-${type}`).text(text);
            alert.show();
            setTimeout(() => alert.hide(), 5000);
        }

        return {
            errorMessages: [],
            grantChart,
            modal: {
                show: {
                    header: true,
                    footer: true
                },
                title: 'Modal',
                content: '',
                errors: [],
                submitHandler: undefined
            },
            updateModal: function(settings) {
                this.modal = Object.assign(this.modal, settings);
            },
            formatDate(value, format) {
                console.log(value);
                const date = moment(value);
                console.log(date.isValid() ? date.format(format) : '');
                return date.isValid() ? date.format(format) : ''; 
            },
            movie: {
                table: undefined,
                data: {},
                listView: [],
                theaters: [],
                selectedTheaters: [],
                theaterIds: new Set(),
                fetchData() {
                    if($.fn.dataTable.isDataTable('#list-movie')) {
                        return false;
                    }
                    fetch('/movie')
                        .then((raw) => raw.json())
                        .then((response) => {
                            if(response.isSuccess) {
                                this.listView = response.data;
                                console.log(response.data);
                                this.table = $('#list-movie').DataTable({
                                    data: this.listView,
                                    columns: [
                                        {
                                            data: 'name'
                                        },
                                        {
                                            data: 'describe'
                                        },
                                        {
                                            data: 'director'
                                        },
                                        {
                                            data: 'writer'
                                        },
                                        {
                                            data: 'MMPA_rating'
                                        },
                                        {
                                            data: 'publish'
                                        },
                                        {
                                            data: 'creationDate'
                                        },
                                        {
                                            data: 'updatedOn'
                                        }
                                    ],
                                    scrollX: true,
                                    columnDefs: [
                                    {
                                        render: function (data, type, row) {
                                            const date = moment(data);

                                            return date.isValid() ? date.format('DD/MM/YYYY') : '';
                                        },
                                        targets: [5,6,7]
                                    },
                                    {
                                        render: function(data, type, row) {
                                            return `
                                                <div>
                                                    <button class="btn btn-success text-uppercase" @click="movie.update($event,${row.id})">update</button>
                                                    <button class="btn btn-danger text-uppercase" @click="movie.delete($event,${row.id})">delete</button>
                                                </div>
                                            `
                                        },
                                        targets: 8
                                    }, 
                                    /**{ 
                                        className: "text-truncate", targets: [ 1 ] 
                                    },*/
                                    {  
                                        width: 400, targets: 1 
                                    }],
                                    createdRow: function(row, data, index) {
                                        $(row).attr('data-id', data.id);
                                        $(row).attr('data-index', index);
                                    }
                                });
                                $('.dataTables_length').addClass('bs-select');
                            }
                        })
                        .catch((error) => {
                            console.log(error);
                        })
                },
                create(event) {
                    event.preventDefault();
                    this.data = { MMPA_rating: 'PA-13' };
                    this.theaters = this.parent.theater.listView;
                    this.parent.modal.title = 'Create Movie';
                    this.parent.modal.content = 'movie_form';
                    this.parent.modal.submitHandler = (event) => {
                        event.stopPropagation();
                        
                        const form = document.getElementById('movie-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            form.classList.add('was-validated');   
                            
                            return false;       
                        }
                        form.classList.remove('was-validated');
                        const selectedTheaters = $('#selected-theaters option:selected');
                        
                        $.each(selectedTheaters, (key, element) => this.theaterIds.add($(element).val()));

                        post('/movie', { data: this.data, theaterIds: Array.from(this.theaterIds) })
                            .then((data) => {
                                if(data.isSuccess) {
                                    this.data.theaters = [...this.selectedTheaters];
                                    this.listView.push(this.data);
                                    this.table.row.add(this.data).draw();
                                    this.data = {};
                                    $('#modal').modal('hide');
                                }
                            })
                            .catch(error => {
                                console.log(error);
                                
                            });
                    }

                    $('#modal').modal('show');
                },
                update(event, id) {
                    event.preventDefault();
                    const index = $(`#list-movie tr[data-id="${id}"]`).data('index');
                    if(index == undefined) return;

                    this.data = this.listView[index];
                    this.data.publish = this.parent.formatDate(this.data.publish, 'YYYY-MM-DD');                  
                    this.selectedTheaters = this.data.theaters;
                    this.selectedTheaters.forEach(theater => this.theaterIds.add(theater.id));
                    this.theaters = this.theaterIds.length ? this.parent.theater.listView.filter((theater) => !this.theaterIds.includes(theater.id)) : this.parent.theater.listView;
                    this.parent.modal.title = 'Update Movie';
                    this.parent.modal.content = 'movie_form';
                    this.parent.modal.submitHandler = (event) => {
                        event.stopPropagation();

                        const form = document.getElementById('movie-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');
                        if(!this.data.poster) {
                            showAlert('Poster is mandatory', 'danger');
                            return;
                        }
                        const selectedTheaters = $('#selected-theaters option');
                         
                        $.each(selectedTheaters, (key, element) => this.theaterIds.add(Number($(element).val())));
                        console.log(this.theaterIds);
                        put(`/movie/${this.data.id}`, { data: this.data, theaterIds: Array.from(this.theaterIds) })
                            .then((data) => {
                                if(data.isSuccess) {
                                    this.listView[index] = data.data;
                                    this.table.row($(`#list-movie tr[data-id="${id}"]`)).data(data.data).draw();
                                    $('#modal').modal('hide');
                                } 
                            })
                            .catch(error => console.log(error));
                    }

                    $('#modal').modal('show');
                },
                readFileUpload(event) {
                    event.preventDefault();
                    const file = event.target.files[0];
                    if(!file) return;

                    const fr = new FileReader();
                    fr.onload = () => {
                        this.data.poster = fr.result;
                    }

                    fr.readAsDataURL(file);
                },
                delete(event, id) {
                    event.preventDefault();

                    destroy(`/movie/${id}`, {})
                        .then((data) => {
                            if(data.isSuccess) {
                                const index = $(`#list-movie tr[data-id="${id}"]`).data('index');
                                
                                this.table.row($(`#list-movie tr[data-id="${id}"]`)).remove().draw();
                            }
                        })
                        .catch(error => console.log(error));
                },
                moveRightTheater(event) {
                    event.preventDefault();

                    const theaters = $('#select-theaters option:selected');
                    if(theaters.length) {
                        const ids = [];
                        $.each(theaters, ( key, element ) => ids.push(+$(element).val()) );
                        const newTheaters = this.theaters.filter((theater) => !ids.includes(theater.id));

                        this.selectedTheaters = this.selectedTheaters.concat(this.theaters.filter((theater) => ids.includes(theater.id)));
                        this.theaters = newTheaters;
                    }
                },
                moveLeftTheater(event) {
                    event.preventDefault();

                    const theaters = $('#selected-theaters option:selected');
                    if(theaters.length) {
                        const ids = [];
                        $.each(theaters, ( key, element ) => ids.push(+$(element).val()) );
                        const newTheaters = this.selectedTheaters.filter((theater) => !ids.includes(theater.id));

                        this.theaters = this.theaters.concat(this.selectedTheaters.filter((theater) => ids.includes(theater.id)));
                        this.selectedTheaters = newTheaters;
                    }
                }
            },
            category: {
                table: undefined,
                data: {},
                listView: [],
                addRow() {
                    table.row.add()
                },
                fetchData() {
                    if($.fn.dataTable.isDataTable('#list-category')) {
                        return false;
                    }
                    fetch('/category')
                        .then((raw) => raw.json())
                        .then((response) => {
                            if(response.isSuccess) {
                                this.listView = response.data;

                                this.table = $('#list-category').DataTable({
                                    data: this.listView,
                                    columns: [
                                        {
                                            data: 'name'
                                        },
                                        {
                                            data: 'level'
                                        },
                                        {
                                            data: 'creationDate'
                                        },
                                        {
                                            data: 'updatedOn'
                                        }
                                    ],
                                    columnDefs: [{
                                        render: function (data, type, row) {
                                            const date = moment(data);

                                            return date.isValid() ? date.format('DD/MM/YYYY') : '';
                                        },
                                        targets: [2,3]
                                    }, {
                                        render: function(data, type, row) {
                                            return `
                                                <div>
                                                    <button class="btn btn-success text-uppercase" @click="category.update($event,${row.id})">update</button>
                                                    <button class="btn btn-danger text-uppercase" @click="category.delete($event,${row.id})">delete</button>
                                                </div>
                                            `
                                        },
                                        targets: 4
                                    }],
                                    createdRow: function(row, data, index) {
                                        $(row).attr('data-id', data.id);
                                        $(row).attr('data-index', index);
                                    }
                                });
                                $('.dataTables_length').addClass('bs-select');
                            }
                        })
                        .catch((error) => {
                            console.log(error);
                        });
                },
                create(event) {
                    event.preventDefault();
                    this.data = {
                        level: 1
                    };
                    this.parent.modal.title = 'Create Category';
                    this.parent.modal.content = 'category_form';
                    this.parent.modal.submitHandler = (event) => {
                        event.stopPropagation();
                        const form = document.getElementById('category-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');

                        post('/category', this.data)
                            .then((data) => {
                                if(data.isSuccess) {
                                    this.listView.push(data.data);
                                    this.table.row.add(data.data).draw();
                                    this.data = {};
                                    $('#modal').modal('hide');
                                }
                                
                            })
                            .catch(error => {
                                console.log(error);
                                
                            });
                    }

                    $('#modal').modal('show');
                },
                update(event, id, data) {
                    event.preventDefault();
                    const index = $(`#list-category tr[data-id="${id}"]`).data('index');
                    if(index == undefined) {
                        alert('data not exist');
                        return;
                    };

                    this.data = this.listView[index];
                    this.parent.modal.title = 'Update Category';
                    this.parent.modal.content = 'category_form';
                    this.parent.modal.submitHandler = (event) => {
                        event.stopPropagation();
                        const form = document.getElementById('category-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');

                        put(`/category/${id}`, { name: this.data.name, level: this.data.level })
                            .then((data) => {
                                if(data.isSuccess) {
                                    this.listView[index] = { ...this.data };
                                    this.table.row($(`#list-category tr[data-id="${id}"]`)).data(this.data).draw();
                                    $('#modal').modal('hide');
                                }
                            })
                            .catch(error => {
                                console.log(error);
                               
                            });
                    }

                    $('#modal').modal('show');
                },
                delete(event, id) {
                    event.preventDefault();

                    destroy(`/category/${id}`, {})
                        .then((data) => {   
                            if(data.isSuccess) {
                                const index = $(`#list-category tr[data-id="${id}"]`).data('index');
                                
                                this.table.row($(`#list-category tr[data-id="${id}"]`)).remove().draw();
                            }
                        
                        })
                        .catch(error => console.log(error));
                }
            },
            group: {
                table: undefined,
                data: {},
                listView: [],
                addRow() {
                    table.row.add()
                },
                fetchData() {
                    if($.fn.dataTable.isDataTable('#list-group')) {
                        return false;
                    }
                    fetch('/groupthearter')
                        .then((raw) => raw.json())
                        .then((response) => {
                            if(response.isSuccess) {
                                this.listView = response.data;

                                this.table = $('#list-group').DataTable({
                                    data: this.listView,
                                    columns: [
                                        {
                                            data: 'name'
                                        },
                                        {
                                            data: 'address'
                                        },
                                        {
                                            data: 'creationDate'
                                        },
                                        {
                                            data: 'updatedOn'
                                        }
                                    ],
                                    columnDefs: [{
                                        render: function (data, type, row)
                                        {
                                            const date = moment(data);

                                            return date.isValid() ? date.format('DD/MM/YYYY') : '';
                                        },
                                        targets: [2, 3]
                                    }, {
                                        render: function (data, type, row)
                                        {
                                            return `
                                                <div>
                                                    <button class="btn btn-success text-uppercase" @click="group.update($event,${row.id})">update</button>
                                                    <button class="btn btn-danger text-uppercase" @click="group.delete($event,${row.id})">delete</button>
                                                </div>
                                            `
                                        },
                                        targets: 4
                                    }],
                                    createdRow: function(row, data, index) {
                                        $(row).attr('data-id', data.id);
                                        $(row).attr('data-index', index);
                                    }
                                });
                                $('.dataTables_length').addClass('bs-select');
                            }
                        })
                        .catch((error) => {
                            console.log(error);
                        });
                },
                create(event) {
                    event.preventDefault();

                    this.data = {};

                    this.parent.modal.title = 'Create Group';
                    this.parent.modal.content = 'group_form';
                    this.parent.modal.submitHandler = (event) => {
                        const form = document.getElementById('group-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');   

                        post('/groupthearter', this.data)
                            .then((data) => {
                                if(data.isSuccess) {
                                    this.listView.push(data.data);
                                    this.table.row.add(data.data).draw();
                                    this.data = {};
                                    $('#modal').modal('hide');
                                }
                                
                            })
                            .catch(error => {
                                console.log(error);
                                
                            });
                    }

                    $('#modal').modal('show');
                },
                update(event, id, data) {
                    event.preventDefault();
                    const index = $(`#list-group tr[data-id="${id}"]`).data('index');
                    if(index == undefined) {
                        alert('data not exist');
                        return;
                    };

                    this.data = this.listView[index];
                    this.parent.modal.title = 'Update group';
                    this.parent.modal.content = 'group_form';
                    this.parent.modal.submitHandler = (event) => {
                        const form = document.getElementById('group-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');   

                        put(`/groupthearter/${id}`, { name: this.data.name, address: this.data.address })
                            .then((data) => {
                                if(data.isSuccess) {
                                    this.listView[index] = { ...this.data };
                                    this.table.row($(`#list-group tr[data-id="${id}"]`)).data(this.data).draw();
                                    $('#modal').modal('hide');
                                }
                              
                            })
                            .catch (error => {
                                console.log(error);
                               
                            });
                    }

                    $('#modal').modal('show');
                },
                delete(event, id) {
                    event.preventDefault();

                    destroy(`/groupthearter/${id}`, {})
                        .then((data) => {
                            if(data.isSuccess) {
                                const index = $(`#list-group tr[data-id="${id}"]`).data('index');
                                
                                this.table.row($(`#list-group tr[data-id="${id}"]`)).remove().draw();
                                alert('delete success');
                            }
                           
                        })
                        .catch(error => console.log(error));
                }
            },
            theater: {
                table: undefined,
                data: {},
                listView: [],
                addRow() {
                    table.row.add()
                },
                fetchData() {
                    if ($.fn.dataTable.isDataTable('#list-theater'))
                    {
                        return false;
                    }
                    fetch('/theater')
                        .then((raw) => raw.json())
                        .then((response) =>
                        {
                            if (response.isSuccess)
                            {
                                this.listView = response.data;

                                this.table = $('#list-theater').DataTable({
                                    data: this.listView,
                                    columns: [
                                        {
                                            data: 'name'
                                        },
                                        {
                                            data: 'type'
                                        },
                                        {
                                            data: 'groupId'
                                        },
                                        {
                                            data: 'creationDate'
                                        },
                                        {
                                            data: 'updatedOn'
                                        }
                                    ],
                                    columnDefs: [{
                                        render: function (data, type, row)
                                        {
                                            const date = moment(data);

                                            return date.isValid() ? date.format('DD/MM/YYYY') : '';
                                        },
                                        targets: [3, 4]
                                    },{
                                        render: function (data, type, row)
                                        {
                                            return `
                                                <div>
                                                    <button class="btn btn-success text-uppercase" @click="theater.update($event,${row.id})">update</button>
                                                    <button class="btn btn-danger text-uppercase" @click="theater.delete($event,${row.id})">delete</button>
                                                </div>
                                            `
                                        },
                                        targets: 5
                                    }],
                                    createdRow: function(row, data, index) {
                                        $(row).attr('data-id', data.id);
                                        $(row).attr('data-index', index);
                                    }
                                });
                                $('.dataTables_length').addClass('bs-select');
                            }
                        })
                        .catch((error) =>
                        {
                            console.log(error);
                        });
                },
                create(event) {
                    event.preventDefault();
                    const firstGroup = this.parent.group.listView[0]?.id ?? '';

                    this.data = {
                        type: "2D",
                        groupId: firstGroup
                    };
                    this.parent.modal.title = 'Create Theater';
                    this.parent.modal.content = 'theater_form';
                    this.parent.modal.submitHandler = (event) => {
                        const form = document.getElementById('theater-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');

                        post('/theater', this.data)
                           .then((data) => {
                                if(data.isSuccess) {
                                    this.listView.push(data.data);
                                    this.table.row.add(data.data).draw();
                                    $('#modal').modal('hide');
                                }
                              
                            })
                            .catch(error => {
                                console.log(error);
                                
                            });
                    }

                    $('#modal').modal('show');
                },
                update(event, id, data) {
                    event.preventDefault();
                    const index = $(`#list-theater tr[data-id="${id}"]`).data('index');
                    if(index == undefined) {
                        alert('data not exist');
                        return;
                    };

                    this.data = this.listView[index];
                    this.parent.modal.title = 'Update theater';
                    this.parent.modal.content = 'theater_form';
                    this.parent.modal.submitHandler = (event) => {
                        const form = document.getElementById('theater-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');

                        put(`/theater/${id}`, { name: this.data.name, type: this.data.type, groupId: this.data.groupId})
                            .then((data) => {
                                if(data.isSuccess) {
                                    this.listView[index] = { ...this.data };
                                    this.table.row($(`#list-theater tr[data-id="${id}"]`)).data(this.data).draw();
                                    $('#modal').modal('hide');
                                }
                             
                            })
                            .catch(error => {
                                console.log(error);
                               
                            });
                    }

                    $('#modal').modal('show');
                },
                delete(event, id) {
                    event.preventDefault();

                    destroy(`/theater/${id}`, {})
                        .then((data) => {
                            if(data.isSuccess) {
                                const index = $(`#list-theater tr[data-id="${id}"]`).data('index');
                                
                                this.table.row($(`#list-theater tr[data-id="${id}"]`)).remove().draw();
                                alert('delete success');
                            }
                          
                                
                        })
                        .catch(error => console.log(error));
                }
            },
            room: {
                table: undefined,
                data: {},
                listView: [],
                addRow() {
                    table.row.add()
                },
                fetchData() {
                    if($.fn.dataTable.isDataTable('#list-room')) {
                        return false;
                    }
                    fetch('/room')
                        .then((raw) => raw.json())
                        .then((response) => {
                            if(response.isSuccess) {
                                this.listView = response.data;

                                this.table = $('#list-room').DataTable({
                                    data: this.listView,
                                    columns: [
                                        {
                                            data: 'name'
                                        },
                                        {
                                            data: 'rows'
                                        },
                                        {
                                            data: 'columns'
                                        },
                                        {
                                            data: 'theater'
                                        },
                                        {
                                            data: 'creationDate'
                                        },
                                        {
                                            data: 'updatedOn'
                                        }
                                    ],
                                    columnDefs: [{
                                        render: function (data, type, row) {
                                            return row.theater.name;
                                        },
                                        targets: [3]
                                    },{
                                        render: function (data, type, row) {
                                            const date = moment(data);

                                            return date.isValid() ? date.format('DD/MM/YYYY') : '';
                                        },
                                        targets: [4,5]
                                    }, {
                                        render: function(data, type, row) {
                                            return `
                                                <div>
                                                    <button class="btn btn-success text-uppercase" @click="room.update($event,${row.id})">update</button>
                                                    <button class="btn btn-danger text-uppercase" @click="room.delete($event,${row.id})">delete</button>
                                                </div>
                                            `
                                        },
                                        targets: 6
                                    }],
                                    createdRow: function(row, data, index) {
                                        $(row).attr('data-id', data.id);
                                        $(row).attr('data-index', index);
                                    }
                                });
                                $('.dataTables_length').addClass('bs-select');
                            }
                        })
                        .catch((error) => {
                            console.log(error);
                        });
                },
                create(event) {
                    event.preventDefault();
                    this.data = {};
                    this.parent.modal.title = 'Create Room';
                    this.parent.modal.content = 'room_form';
                    this.parent.modal.submitHandler = (event) => {
                        event.stopPropagation();
                        const form = document.getElementById('room-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');

                        post('/room', this.data)
                            .then((data) => {
                                if(data.isSuccess) {
                                    this.listView.push(data.data);
                                    this.table.row.add(data.data).draw();
                                    this.data = {};
                                    $('#modal').modal('hide');
                                }
                               
                            })
                            .catch(error => {
                                console.log(error);
                                
                            });
                    }

                    $('#modal').modal('show');
                },
                update(event, id, data) {
                    event.preventDefault();
                    const index = $(`#list-room tr[data-id="${id}"]`).data('index');
                    if(index == undefined) {
                        alert('data not exist');
                        return;
                    };

                    this.data = this.listView[index];
                    this.parent.modal.title = 'Update Room';
                    this.parent.modal.content = 'room_form';
                    this.parent.modal.submitHandler = (event) => {
                        event.stopPropagation();
                        const form = document.getElementById('room-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');

                        put(`/room/${id}`, { name: this.data.name, level: this.data.level })
                            .then((data) => {
                                if(data.isSuccess) {
                                    this.listView[index] = { ...this.data };
                                    this.table.row($(`#list-room tr[data-id="${id}"]`)).data(this.data).draw();
                                    $('#modal').modal('hide');
                                }
                                
                            })
                            .catch(error => {
                                console.log(error);
                               
                            });
                    }

                    $('#modal').modal('show');
                },
                delete(event, id) {
                    console.log(event.target);
                    event.preventDefault();

                    destroy(`/room/${id}`, {})
                        .then((data) => {   
                            if(data.isSuccess) {
                                const index = $(`#list-room tr[data-id="${id}"]`).data('index');
                                
                                this.table.row($(`#list-room tr[data-id="${id}"]`)).remove().draw();
                                alert('delete success');
                            }
                          
                        })
                        .catch(error => console.log(error));
                }
            },
            showTime: {
                table: undefined,
                data: {},
                listView: [],
                rangeTime: ['06:00', '08:00', '10:00', '12:00', '14:00', '16:00', '18:00', '20:00'],
                addRow() {
                    table.row.add()
                },
                fetchData() {
                    if($.fn.dataTable.isDataTable('#list-showtime')) {
                        return false;
                    }
                    fetch('/api/showtime')
                        .then((raw) => raw.json())
                        .then((response) => {
                            if(response.isSuccess) {
                                this.listView = response.data;

                                this.table = $('#list-showtime').DataTable({
                                    data: this.listView,
                                    scrollX: true,
                                    columns: [
                                        {
                                            data: 'id'
                                        },
                                        {
                                            data: 'date'
                                        },
                                        {
                                            data: 'start'
                                        },
                                        {
                                            data: 'end'
                                        },
                                        {
                                            data: 'price'
                                        },
                                        {
                                            data: 'room'
                                        },
                                        {
                                            data: 'movie'
                                        },
                                        {
                                            data: 'theater'
                                        },
                                        {
                                            data: 'creationDate'
                                        },
                                        {
                                            data: 'updatedOn'
                                        }
                                    ],
                                    columnDefs: [{
                                        render: function (data, type, row)
                                        {
                                            const date = moment(data);

                                            return date.isValid() ? date.format('DD/MM/YYYY') : '';
                                        },
                                        targets: [1, 8, 9]
                                    },{
                                        render: function (data, type, row)
                                        {
                                            return row.room.name
                                        },
                                        targets: 5
                                    },{
                                        render: function (data, type, row)
                                        {
                                           return row.movie.name;
                                        },
                                        targets: 6
                                    },{
                                        render: function (data, type, row)
                                        {
                                           return row.room.theater.name;
                                        },
                                        targets: 7
                                    }, {
                                        render: function (data, type, row)
                                        {
                                            return `
                                                <div>
                                                    <button class="btn btn-success text-uppercase" @click="showTime.update($event,${row.id})">update</button>
                                                    <button class="btn btn-danger text-uppercase" @click="showTime.delete($event,${row.id})">delete</button>
                                                </div>
                                            `
                                        },
                                        targets: 10
                                    }],
                                    createdRow: function(row, data, index) {
                                        $(row).attr('data-id', data.id);
                                        $(row).attr('data-index', index);
                                    }
                                });
                                $('.dataTables_length').addClass('bs-select');
                            }
                        })
                        .catch((error) => {
                            console.log(error);
                        });
                },
                create(event) {
                    event.preventDefault();

                    this.data = {};

                    this.parent.modal.title = 'Create Show Time';
                    this.parent.modal.content = 'showtime_form';
                    this.parent.modal.submitHandler = (event) => {
                        const form = document.getElementById('showtime-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated')
                        console.log(this.data);    
                        if(this.data.start == this.data.end) {
                            alert('start is equals end');
                            return;
                        }   

                        post('api/showtime', this.data)
                            .then((data) => {
                                if(data.isSuccess) {
                                    this.listView.push(data.data);
                                    this.table.row.add(data.data).draw();
                                    this.data = {};
                                    $('#modal').modal('hide');
                                }
                               
                            })
                            .catch(error => {
                                console.log(error);
                                
                            });
                    }

                    $('#modal').modal('show');
                },
                update(event, id, data) {
                    event.preventDefault();
                    const index = $(`#list-showtime tr[data-id="${id}"]`).data('index');
                    if(index == undefined) {
                        alert('data not exist');
                        return;
                    };

                    this.data = {...this.listView[index]};
                    this.data.start = this.timeToPicklist(this.data.start);
                    this.data.end = this.timeToPicklist(this.data.end);
                    console.log(this.data);
                    this.parent.modal.title = 'Update Show Time';
                    this.parent.modal.content = 'showtime_form';
                    this.parent.modal.submitHandler = (event) => {
                        const form = document.getElementById('showtime-form');
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                            form.classList.add('was-validated');   
                            
                            return false;
                        }
                        form.classList.remove('was-validated');   

                        put(`api/showtime/${id}`, { name: this.data.name, address: this.data.address })
                            .then((data) => {
                                if(data.isSuccess) {
                                    this.listView[index] = { ...this.data };
                                    this.table.row($(`#list-showtime tr[data-id="${id}"]`)).data(this.data).draw();
                                    $('#modal').modal('hide');
                                }
                                else {
                                   
                                }   
                            })
                            .catch (error => {
                                console.log(error);
                               
                            });
                    }

                    $('#modal').modal('show');
                },
                delete(event, id) {
                    event.preventDefault();

                    destroy(`api/showtime/${id}`, {})
                        .then((data) => {
                            if(data.isSuccess) {
                                const index = $(`#list-showtime tr[data-id="${id}"]`).data('index');
                                
                                this.table.row($(`#list-showtime tr[data-id="${id}"]`)).remove().draw();
                            }
                          
                        })
                        .catch(error => console.log(error));
                },
                timeToPicklist(value) {
                    return value ? `${value.split(':')[0]}:00` : '';
                }
            },
            createArray(number) {
				return Array.from({ length: number }, (_item, index) => index);
			},
            section: 'dashboard',
            fetchReport() {
               
            },
            loadTheater() {
            
            },
            loadManagement() {
                this.section = 'management';
                
                this.category.fetchData();
                this.category.parent = this;
                this.movie.fetchData();
                this.movie.parent = this;
                this.group.fetchData();
                this.group.parent = this;
                this.theater.fetchData();
                this.theater.parent = this;
                this.room.fetchData();
                this.room.parent = this;
                this.showTime.fetchData();
                this.showTime.parent = this;
            },
            loadDashBoard(){
                this.section ='dashboard'
            },
            movieStatistical(event) {
                event.preventDefault();
                const form = document.getElementById('movie-chart-form');
                if (!form.checkValidity()) {
                    event.preventDefault();
                    form.classList.add('was-validated');   
                    
                    return false;
                }
                form.classList.remove('was-validated');

                fetch(`/statistical/movie?start=${this.grantChart.movie.start}&end=${this.grantChart.movie.end}`)
                    .then((raw) => raw.json())
                    .then((response) => {
                        if(response.isSuccess) {
                            initChart(() => {
                                this.grantChart.movie.data = response.data;
                                setContructChart('movie', 'grant-chart-movie', response.data);
                            });
                        }
                    })
                    .catch((error) => {
                        console.log(error);
                    }); 
            },
            groupStatistical(event) {
                event.preventDefault();
                const form = document.getElementById('group-chart-form');
                if (!form.checkValidity()) {
                    event.preventDefault();
                    form.classList.add('was-validated');   
                    
                    return false;
                }
                form.classList.remove('was-validated');

                fetch(`/statistical/group?start=${this.grantChart.group.start}&end=${this.grantChart.group.end}`)
                    .then((raw) => raw.json())
                    .then((response) => {
                        if(response.isSuccess) {
                            initChart(() => {
                                this.grantChart.group.data = response.data;
                                console.log(this.grantChart);
                                setContructChart('group', 'grant-chart-group', response.data);
                            });
                        }
                    })
                    .catch((error) => {
                        console.log(error);
                    }); 
            },
            createYear(start, end) {
                return Array.from({ length: end }, (_item, index) => index + start);
            }
		}
	}

    function initChart(drawChart)
    {
        google.charts.load('current', { packages: ['corechart', 'bar'] });
        google.charts.setOnLoadCallback(drawChart);
    }

    function setContructChart(typeChart, element, chartData)
    {
        let data = new google.visualization.DataTable();
        let row = options = view = {};

        switch (typeChart)
        {
            case 'movie':
                data.addColumn('string', 'Movie Name');
                data.addColumn('number', 'Annaul');
                // data.addColumn('number', 'Product');

                row = movieRow(chartData);
                console.log(row);
                options = movieOptions();
                view = movieView(data);
                break;
            case 'group':
                data.addColumn('string', 'Group Name');
                data.addColumn('number', 'Annaul');
                // data.addColumn('number', 'Product');

                row = groupRow(chartData);
                options = groupOptions();
                view = groupView(data);
                break;
        }

        data.addRows(row);

        const chart = new google.charts.Bar(document.getElementById(element));
        chart.draw(view, google.charts.Bar.convertOptions(options));
    }

    function movieOptions()
    {
        return {
            height: grantChart.movie.height,
            width: grantChart.movie.width,
            chart: {
                subtitle: `Annual Movie`
            },
            series: {
                0: { axis: 'Annual' },
            },
            axes: {
                y: {
                    Amount: { label: 'Annual of movie' },
                }
            },
            bars: 'vertical',
            animation: {
                startup: true
            }
        }
    }

    function movieView(data)
    {
        const view = new google.visualization.DataView(data);
        view.setColumns([0, 1, { calc: 'stringify', sourceColumn: 1, type: 'string', role: 'annotation' }]);
        return view;
    }

    function movieRow(data)
    {
        return Array.from({ length: data.length }, (value, i) =>
        {
            return [data[i].name, +data[i]['showTimes.tickets.total_price'] ];
        });
    }

     function groupOptions()
    {
        return {
            height: grantChart.group.height,
            width: grantChart.group.width,
            chart: {
                subtitle: `Annual Group`
            },
            series: {
                0: { axis: 'Annual' },
            },
            axes: {
                y: {
                    Amount: { label: 'Annual of group' },
                }
            },
            bars: 'vertical',
            animation: {
                startup: true
            }
        }
    }

    function groupView(data)
    {
        const view = new google.visualization.DataView(data);
        view.setColumns([0, 1, { calc: 'stringify', sourceColumn: 1, type: 'string', role: 'annotation' }]);
        return view;
    }

    function groupRow(data)
    {
        return Array.from({ length: data.length }, (value, i) =>
        {
            console.log(data);
            return [data[i].name, +data[i]['theaters.rooms.showTimes.tickets.total_price'] ];
        });
    }
</script>
{{/contentFor }}